@echo off
setlocal enabledelayedexpansion

rem Get basic info
for /f "tokens=*" %%a in ('git config user.email') do set USER_EMAIL=%%a
for /f "tokens=*" %%a in ('git config user.name') do set USER_NAME=%%a
for /f "tokens=*" %%a in ('git config --get remote.origin.url') do set REPO_URL=%%a

rem Clean up the repo URL to get the base GitHub URL for commits
set REPO_URL=!REPO_URL:.git=!
if "!REPO_URL:~0,4!"=="git@" (
    set REPO_URL=!REPO_URL:git@github.com:=https://github.com/!
)
if "!REPO_URL:~0,8!"=="https://" (
    set BASE_URL=!REPO_URL!/commit/
    set PR_BASE_URL=!REPO_URL!/pull/
) else (
    set BASE_URL=https://github.com/!REPO_URL!/commit/
    set PR_BASE_URL=https://github.com/!REPO_URL!/pull/
)

rem Set Jira base URL - change this to your actual Jira URL
set JIRA_URL=https://your-company.atlassian.net/browse/

rem Calculate date for 8 days ago
for /f "tokens=*" %%a in ('powershell -Command "[DateTime]::Now.AddDays(-8).ToString('yyyy-MM-dd')"') do set EIGHT_DAYS_AGO=%%a

set DATE_STAMP=%date:~-4,4%%date:~-7,2%%date:~-10,2%
set EMAIL_FILE=activity_report_%DATE_STAMP%.html

rem Create HTML file header
echo ^<!DOCTYPE html^> > %EMAIL_FILE%
echo ^<html^> >> %EMAIL_FILE%
echo ^<head^> >> %EMAIL_FILE%
echo ^<title^>Git Activity Report^</title^> >> %EMAIL_FILE%
echo ^<style^> >> %EMAIL_FILE%
echo body { font-family: Arial, sans-serif; margin: 20px; } >> %EMAIL_FILE%
echo h1, h2 { color: #333; } >> %EMAIL_FILE%
echo .commit, .pr { margin-bottom: 15px; } >> %EMAIL_FILE%
echo .commit-msg, .pr-title { margin: 5px 0; } >> %EMAIL_FILE%
echo .jira-refs { margin-top: 5px; color: #0066cc; } >> %EMAIL_FILE%
echo .summary { margin-top: 30px; border-top: 1px solid #ccc; padding-top: 10px; } >> %EMAIL_FILE%
echo ^</style^> >> %EMAIL_FILE%
echo ^</head^> >> %EMAIL_FILE%
echo ^<body^> >> %EMAIL_FILE%

rem Create email header
echo ^<h1^>Git Activity Report by %USER_NAME%^</h1^> >> %EMAIL_FILE%
echo ^<p^>Report generated on %date% showing unique commits and PRs from the last 8 days^</p^> >> %EMAIL_FILE%

rem Create the Commits section
echo ^<h2^>RECENT COMMITS^</h2^> >> %EMAIL_FILE%

rem Get all unique commits from the last 8 days across all branches
rem Include Unix timestamp to ensure proper chronological sorting
git log --all --author="%USER_EMAIL%" --since="%EIGHT_DAYS_AGO%" --pretty=format:"%%at|%%h|%%s|%%ad|%%an" --date=short > all_commits.txt

rem Count unique commits
set TOTAL_COMMITS=0

rem Sort the commits by timestamp (most recent first)
sort /r all_commits.txt > sorted_commits.txt

rem Add commits
for /f "tokens=1-5 delims=|" %%c in (sorted_commits.txt) do (
    set /a TOTAL_COMMITS+=1
    set COMMIT_MSG=%%e
    
    echo ^<div class="commit"^> >> %EMAIL_FILE%
    echo ^<div^>^<a href="%BASE_URL%%%d"^>%%d^</a^> - %%f by %%g^</div^> >> %EMAIL_FILE%
    echo ^<div class="commit-msg"^>%%e^</div^> >> %EMAIL_FILE%
    
    rem Check for Jira ticket references in commit message
    set "JIRA_REFS="
    
    rem Use temporary file to store the PowerShell output
    powershell -Command "$message = '%%e'; [regex]::Matches($message, '[A-Z]+-\d+') | ForEach-Object { $_.Value } | Get-Unique" > jira_tickets_temp.txt
    
    rem Process each Jira ticket reference
    set "HAS_JIRA=0"
    for /f "tokens=*" %%j in (jira_tickets_temp.txt) do (
        set "HAS_JIRA=1"
        set "JIRA_REFS=!JIRA_REFS! ^<a href='%JIRA_URL%%%j'^>%%j^</a^>"
    )
    
    rem Add Jira links section if references were found
    if "!HAS_JIRA!"=="1" (
        echo ^<div class="jira-refs"^>Jira: !JIRA_REFS!^</div^> >> %EMAIL_FILE%
    )
    
    echo ^</div^> >> %EMAIL_FILE%
)

rem Create Pull Requests section
echo ^<h2^>RECENT PULL REQUESTS^</h2^> >> %EMAIL_FILE%

rem Use git to get merged PRs (requires GitHub CLI if you want full details)
if exist "C:\Program Files\GitHub CLI\gh.exe" (
    rem If GitHub CLI is installed, get PRs with more details and include the raw timestamp for sorting
    "C:\Program Files\GitHub CLI\gh.exe" pr list --state merged --limit 30 --json number,title,mergedAt,author --jq ".[] | select(.mergedAt > \"%EIGHT_DAYS_AGO%\") | (.mergedAt | sub(\"T.*$\"; \"\") | sub(\"-\"; \"\") | sub(\"-\"; \"\"))+\"|\"+\"PR #\(.number)|\(.title)|\(.mergedAt | sub(\"T.*$\"; \"\"))|\(.author.login)\"" > prs_temp.txt
) else (
    rem Fallback to listing recent merged PRs from git
    echo ^<p^>To show complete PR information, install GitHub CLI (gh)^</p^> >> %EMAIL_FILE%
    rem Include timestamp for sorting
    git log --merges --since="%EIGHT_DAYS_AGO%" --grep="Merge pull request" --pretty=format:"%%at|PR|%%s|%%ad|%%an" --date=short > prs_temp.txt
)

rem Check if there are PRs
set /p PR_FIRST_LINE=<prs_temp.txt
if not "!PR_FIRST_LINE!"=="" (
    set TOTAL_PRS=0
    
    rem Sort PRs by timestamp (most recent first)
    sort /r prs_temp.txt > sorted_prs.txt
    
    rem Process PRs - format depends on whether we're using GitHub CLI or git log
    for /f "tokens=1-5 delims=|" %%o in (sorted_prs.txt) do (
        set /a TOTAL_PRS+=1
        
        rem Extract PR number and create link differently depending on source
        if "%%p"=="PR" (
            rem From git log - parse PR number from merge commit message
            set PR_NUM=%%q
            set PR_NUM=!PR_NUM:#=!
            set PR_NUM=!PR_NUM:~0,5!
            set PR_DATE=%%r
            set PR_AUTHOR=%%s
            set PR_TITLE=%%q
        ) else (
            rem From GitHub CLI - already formatted
            set PR_NUM=%%p
            set PR_NUM=!PR_NUM:PR #=!
            set PR_TITLE=%%q
            set PR_DATE=%%r
            set PR_AUTHOR=%%s
        )
        
        echo ^<div class="pr"^> >> %EMAIL_FILE%
        echo ^<div^>^<a href="%PR_BASE_URL%!PR_NUM!"^>PR #!PR_NUM!^</a^> - !PR_DATE! by !PR_AUTHOR!^</div^> >> %EMAIL_FILE%
        echo ^<div class="pr-title"^>!PR_TITLE!^</div^> >> %EMAIL_FILE%
        
        rem Check for Jira ticket references in PR title
        set "JIRA_REFS="
        
        rem Use temporary file to store the PowerShell output
        powershell -Command "$message = '!PR_TITLE!'; [regex]::Matches($message, '[A-Z]+-\d+') | ForEach-Object { $_.Value } | Get-Unique" > jira_tickets_temp.txt
        
        rem Process each Jira ticket reference
        set "HAS_JIRA=0"
        for /f "tokens=*" %%j in (jira_tickets_temp.txt) do (
            set "HAS_JIRA=1"
            set "JIRA_REFS=!JIRA_REFS! ^<a href='%JIRA_URL%%%j'^>%%j^</a^>"
        )
        
        rem Add Jira links section if references were found
        if "!HAS_JIRA!"=="1" (
            echo ^<div class="jira-refs"^>Jira: !JIRA_REFS!^</div^> >> %EMAIL_FILE%
        )
        
        echo ^</div^> >> %EMAIL_FILE%
    )
    
    rem Add summary section
    echo ^<div class="summary"^> >> %EMAIL_FILE%
    echo ^<h2^>SUMMARY^</h2^> >> %EMAIL_FILE%
    echo ^<p^>Total Pull Requests: !TOTAL_PRS!^</p^> >> %EMAIL_FILE%
    echo ^<p^>Total Unique Commits: %TOTAL_COMMITS% in the last 8 days^</p^> >> %EMAIL_FILE%
    echo ^</div^> >> %EMAIL_FILE%
) else (
    echo ^<p^>No pull requests merged in the last 8 days.^</p^> >> %EMAIL_FILE%
    echo ^<div class="summary"^> >> %EMAIL_FILE%
    echo ^<h2^>SUMMARY^</h2^> >> %EMAIL_FILE%
    echo ^<p^>Total Unique Commits: %TOTAL_COMMITS% in the last 8 days^</p^> >> %EMAIL_FILE%
    echo ^</div^> >> %EMAIL_FILE%
)

rem Close HTML tags
echo ^</body^> >> %EMAIL_FILE%
echo ^</html^> >> %EMAIL_FILE%

rem Clean up
del all_commits.txt 2>nul
del sorted_commits.txt 2>nul
del prs_temp.txt 2>nul
del sorted_prs.txt 2>nul
del jira_tickets_temp.txt 2>nul

echo Report generated: %EMAIL_FILE%
echo.
echo Note: 
echo 1. Open the HTML file in a browser and copy the formatted content into your Outlook email
echo 2. Make sure your email format in Outlook is set to HTML (not plain text)
echo 3. Please update the JIRA_URL variable with your actual Jira instance URL
echo    Current setting: %JIRA_URL%
